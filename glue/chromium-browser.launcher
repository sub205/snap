#!/bin/bash

if [ "$SNAP_ARCH" == "amd64" ]; then
    ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" == "armhf" ]; then
    ARCH="arm-linux-gnueabihf"
elif [ "$SNAP_ARCH" == "arm64" ]; then
    ARCH="aarch64-linux-gnu"
else
    ARCH="$SNAP_ARCH-linux-gnu"
fi

# Mesa Libs
export LD_LIBRARY_PATH=${MIR_LIBS}/mesa-egl:$LD_LIBRARY_PATH

# XKB config
export XKB_CONFIG_ROOT=$SNAP/usr/share/X11/xkb

# XDG Config
export XDG_CONFIG_HOME=$SNAP_DATA
export XDG_CONFIG_DIRS=$SNAP/etc/xdg:$XDG_CONFIG_DIRS
export XDG_CONFIG_DIRS=$SNAP/usr/xdg:$XDG_CONFIG_DIRS
export XDG_DATA_DIRS=$SNAP/usr/share:$XDG_DATA_DIRS
export XDG_DATA_HOME=$SNAP_DATA

# needed for fontconfig
export FONTCONFIG_PATH=$SNAP/etc/fonts/config.d
export FONTCONFIG_FILE=$SNAP/etc/fonts/fonts.conf

export ARCH

export LC_ALL="C.UTF-8"

# XWayland bringup
# Use new port number in case old server clean up wasn't successful
port=0
while [ -e "/tmp/.X11-unix/X${port}" ]; do
    let port+=1
done

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1738197 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

XDG_RUNTIME_DIR=$SNAP_COMMON/wayland $SNAP/usr/bin/Xwayland -reset -terminate :${port} & pid1=$!
sleep 1 #FIXME: racey
DISPLAY=:${port} $SNAP/usr/bin/i3 -c $SNAP/etc/i3.config & pid2=$!

_is_json_array() {
    [[ $(echo $1 | jq '.[]' &> /dev/null; echo $?) == 0 ]]
}

# Get URL - can be single url, or JSON-style array of urls. If former, need to
# surround in double-quotes for later use
url="$(snapctl get url)"
if ! _is_json_array $url; then url="\"$url\""; fi

# Time to reset in minutes (float)
reset="$(snapctl get resettime)"
# Show nav bar (true/false)
shownav="$(snapctl get shownav)"
# Hide cursor (true/false)
hidecursor="$(snapctl get hidecursor)"

# Prepare extension - copy from read-only filesystem, and generate settings.js
cp -R $SNAP/etc/chromium-browser/kiosk-app /tmp
cat >/tmp/kiosk-app/js/settings.js <<EOL
var kiosk_settings = {
"url": ${url},
"reset": ${reset},
"allowprint": false,
"shownav": ${shownav},
"local": false,
"remote": false,
"username": "",
"password": "",
"restart": false,
"remoteschedule": false,
"hidegslidescontrols": true,
"hidecursor": ${hidecursor},
"disablecontextmenu": true,
"disabledrag": true,
"disabletouchhighlight": true,
"disableselection": true,
"resetcache": false,
"partition": false,
"allownewwindow": false,
"screensavertime": 0,
"screensaverURL": "",
"clearcookiesreset": true,
"whitelist": "",
"useragent": "",
"authorization": "",
"multipleurlmode": "",
"rotaterate": "",
}
EOL

# Chromium bringup
DISPLAY=:${port} "$SNAP/usr/lib/chromium-browser/chromium-browser" \
        --no-default-browser-check \
        --no-first-run \
        --noerrdialogs \
        --disable-restore-session-state \
        --disable-infobars \
        --disable-java \
        --disable-translate \
        --disable-suggestions-service \
        --disable-save-password-bubble \
        --no-sandbox \
        --disable-gpu-sandbox \
        --dbus-stub \
        --enable-logging=stderr \
        --ignore-gpu-blacklist --enable-native-gpu-memory-buffers \
        --class=chromium \
        --profile-directory=Default \
        --load-and-launch-app=/tmp/kiosk-app \
        --silent-launch
        # Cannot run as root and be sandboxed at the same time, but then need
        # to hide the "warning sandboxing disabled" banner
        # kiosk-printing disables printing entirely
        # "load-and-launch-app" loads app extension source from a directory, and launches
        # "silent-launch" prevents normal Chromium window opening first

kill $pid2
kill $pid1
